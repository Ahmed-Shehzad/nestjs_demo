name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # Code Quality & Security Checks
  # ==========================================
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎨 Check code formatting
        run: npm run format -- --check

      - name: 🔍 Lint code
        run: npm run lint:ci

      - name: 🏗️ Type check
        run: npm run build

      - name: 📊 Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # ==========================================
  # Database & Migration Tests
  # ==========================================
  database:
    name: 🗄️ Database & Migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Run Prisma migrations
        run: npx prisma migrate deploy

      - name: 🔧 Generate Prisma client
        run: npx prisma generate

      - name: ✅ Verify database schema
        run: npx prisma db push --accept-data-loss

  # ==========================================
  # Unit Tests (No Database)
  # ==========================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [quality]

    env:
      NODE_ENV: test
      # Mock database URL for unit tests (prevents real connections)
      DATABASE_URL: postgresql://test:test@localhost:5432/test_db
      TEST_DATABASE_URL: postgresql://test:test@localhost:5432/test_db

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔧 Generate Prisma client (for types only)
        env:
          DATABASE_URL: postgresql://dummy:dummy@dummy:5432/dummy
        run: npx prisma generate

      - name: 🧪 Run unit tests with coverage
        run: npm run test:cov

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: nestjs-api-unit-tests

      - name: 📈 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            **/*.log

  # ==========================================
  # E2E Tests (With Database)
  # ==========================================
  e2e-tests:
    name: 🔗 E2E Tests
    runs-on: ubuntu-latest
    needs: [quality, database]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nest_test
      NODE_ENV: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        run: |
          npx prisma migrate deploy
          npx prisma generate

      - name: 🔗 Run E2E tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            **/*.log

  # ==========================================
  # Security Scanning
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [quality]
    permissions:
      security-events: write
      contents: read

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run dependency vulnerability scan
        run: npm audit --audit-level high

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==========================================
  # Build & Push Docker Image
  # ==========================================
  build:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, database, security]
    if: always() && (needs.unit-tests.result == 'success' && needs.e2e-tests.result == 'success' && needs.database.result == 'success')
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # ==========================================
  # Deploy to Staging (develop branch)
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, quality]
    if: github.ref == 'refs/heads/develop' && needs.quality.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: https://staging.your-domain.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your staging deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI commands

  # ==========================================
  # Deploy to Production (main branch)
  # ==========================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, quality]
    if: github.ref == 'refs/heads/main' && needs.quality.outputs.should-deploy == 'true'
    environment:
      name: production
      url: https://your-domain.com

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your production deployment commands here
          # Example: kubectl, docker-compose, or cloud provider CLI commands

  # ==========================================
  # Notification
  # ==========================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📢 Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "✅ Staging deployment successful"
          fi
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Production deployment successful"
          fi
          # Add notification logic here (Slack, Discord, email, etc.)
