import { HttpStatus } from '@nestjs/common';
import {
  PrismaClientInitializationError,
  PrismaClientKnownRequestError,
  PrismaClientRustPanicError,
  PrismaClientUnknownRequestError,
  PrismaClientValidationError,
} from '@prisma/client/runtime/library';

/**
 * Problem Details for HTTP APIs (RFC 7807)
 *
 * Standard interface for representing problem details in HTTP API responses.
 * This provides a consistent format for error responses across the application.
 *
 * @see https://tools.ietf.org/html/rfc7807
 */
export interface ProblemDetails {
  /**
   * A URI reference that identifies the problem type.
   * When dereferenced, it should provide human-readable documentation for the problem type.
   */
  type: string;

  /**
   * A short, human-readable summary of the problem type.
   * It SHOULD NOT change from occurrence to occurrence of the problem.
   */
  title: string;

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   */
  status: number;

  /**
   * A human-readable explanation specific to this occurrence of the problem.
   */
  detail: string;

  /**
   * A URI reference that identifies the specific occurrence of the problem.
   * It may or may not yield further information if dereferenced.
   */
  instance: string;

  /**
   * ISO 8601 timestamp when the problem occurred
   */
  timestamp: string;

  /**
   * Unique identifier for tracking this specific problem occurrence
   */
  traceId: string;

  /**
   * Application-specific error code for programmatic handling
   */
  code: string;

  /**
   * Additional properties specific to the problem type.
   * This allows for extension of the problem details format.
   */
  [key: string]: any;
}

/**
 * Validation Problem Details
 *
 * Extended problem details specifically for validation errors.
 */
export interface ValidationProblemDetails extends ProblemDetails {
  /**
   * Total number of validation errors
   */
  errorCount: number;

  /**
   * Detailed validation failures with property-specific information
   */
  violations: Array<{
    field: string;
    message: string;
    rejectedValue?: any;
    code: string;
  }>;
}

/**
 * Domain Problem Details
 *
 * Extended problem details for domain-specific business rule violations.
 */
export interface DomainProblemDetails extends ProblemDetails {
  /**
   * Business context information
   */
  context: Record<string, any>;

  /**
   * Related entity information
   */
  entity?: {
    type: string;
    id: string;
  };
}

export interface DatabaseProblemDetails extends ProblemDetails {
  status: HttpStatus;
  type: string;
  title: string;
  meta?: Record<string, unknown>;
}

/**
 * Security Problem Details
 *
 * Extended problem details for security-related errors.
 */
export interface SecurityProblemDetails extends ProblemDetails {
  /**
   * Security error category
   */
  category:
    | 'authentication'
    | 'authorization'
    | 'forbidden'
    | 'rate_limit'
    | 'token_expired'
    | 'insufficient_permissions';

  /**
   * Suggested action for the client
   */
  suggestedAction: string;

  /**
   * Authentication/authorization context
   */
  securityContext?: {
    userId?: string;
    permissions?: string[];
    tokenType?: string;
    expiresAt?: string;
  };
}

/**
 * Union type for all possible database errors that can occur
 */
export type DatabaseErrors =
  | PrismaClientKnownRequestError
  | PrismaClientUnknownRequestError
  | PrismaClientRustPanicError
  | PrismaClientInitializationError
  | PrismaClientValidationError;
