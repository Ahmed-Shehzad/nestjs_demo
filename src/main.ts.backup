import { ProblemDetailsExceptionFilter } from '@/problem-details/filters/problem-details-exception.filter';
import { ValidationPipe, VersioningType } from '@nestjs/common';
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

/**
 * Environment configuration interface
 */
interface EnvironmentConfig {
  environment: string;
  port: number;
  host: string;
  protocol: string;
  baseUrl: string;
}

/**
 * Get environment-specific configuration
 */
function getEnvironmentConfig(): EnvironmentConfig {
  const environment = process.env.NODE_ENV || 'development';
  const port = parseInt(process.env.PORT || '3000', 10);
  const host = process.env.HOST || 'localhost';
  const protocol = process.env.PROTOCOL || (environment === 'production' ? 'https' : 'http');
  const portSuffix = port !== 80 && port !== 443 ? `:${port}` : '';
  const baseUrl = process.env.BASE_URL || `${protocol}://${host}${portSuffix}`;

  return {
    environment,
    port,
    host,
    protocol,
    baseUrl,
  };
}

/**
 * Application bootstrap function
 */
async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  const envConfig = getEnvironmentConfig();

  // Configure application
  app.setGlobalPrefix('api');
  app.enableVersioning({
    type: VersioningType.URI,
    defaultVersion: '2',
  });
  app.useGlobalPipes(new ValidationPipe({ whitelist: true }));
  app.useGlobalFilters(new ProblemDetailsExceptionFilter());

  // Setup OpenAPI/Swagger UI (only in non-production environments)
  if (envConfig.environment !== 'production') {
    try {
      // Use standard NestJS SwaggerModule for automatic controller discovery
      const { DocumentBuilder, SwaggerModule } = await import('@nestjs/swagger');

      // Create unified document with server selector for version switching
      const config = new DocumentBuilder()
        .setTitle('NestJS WebAPI')
        .setDescription('A comprehensive NestJS API with Clean Architecture, CQRS, and DDD patterns')
        .setVersion('2.0.0')
        // Add servers for version selection dropdown in Swagger UI
        .addServer(envConfig.baseUrl + '/api/v2', 'API Version 2 (Latest)')
        .addServer(envConfig.baseUrl + '/api/v1', 'API Version 1 (Legacy)')
        .addTag('Users', 'User management operations')
        .addTag('Bookmarks', 'Bookmark management operations')
        .build();

      // Generate unified document with all endpoints
      const document = SwaggerModule.createDocument(app, config, {
        include: [], // Include all modules
      });

      // Setup unified Swagger UI with server dropdown for version selection
      SwaggerModule.setup('api/docs', app, document, {
        explorer: true,
        swaggerOptions: {
          persistAuthorization: true,
          displayRequestDuration: true,
          defaultModelsExpandDepth: 1,
          defaultModelExpandDepth: 1,
          docExpansion: 'list',
          // Enable server selection dropdown
          tryItOutEnabled: true,
          filter: true,
          // Plugin to handle version filtering
          plugins: [
            {
              statePlugins: {
                spec: {
                  wrapSelectors: {
                    allowTryItOutFor: () => () => true,
                  },
                },
              },
            },
          ],
        },
        customSiteTitle: 'NestJS WebAPI Documentation',
        customCss: `
          .swagger-ui .servers > label {
            font-weight: bold;
            color: #3b4151;
            margin-bottom: 8px;
            display: block;
          }
          .swagger-ui .servers select {
            min-width: 300px;
            padding: 10px;
            border: 2px solid #3b82f6;
            border-radius: 6px;
            background: white;
            font-size: 14px;
            font-weight: 500;
          }
          .swagger-ui .servers {
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            border-radius: 8px;
            border-left: 4px solid #3b82f6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          .swagger-ui .info .title:after {
            content: " - Multi-Version API";
            color: #6b7280;
            font-weight: normal;
            font-size: 0.8em;
          }
          .version-badge {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 12px;
            font-size: 0.75em;
            font-weight: bold;
            margin-left: 8px;
            text-transform: uppercase;
          }
          .version-v2 {
            background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
            color: #1e40af;
            border: 1px solid #93c5fd;
          }
          .version-v1 {
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
            color: #d97706;
            border: 1px solid #fbbf24;
          }
          .servers-description {
            margin-top: 10px;
            font-size: 13px;
            color: #6b7280;
            font-style: italic;
          }
        `,
        customJs: `
          console.log('ÔøΩ Simple Swagger Version Filter Loading...');

          // Simple function to filter endpoints by URL path
          function filterEndpointsByVersion(version) {
            console.log('Filtering for version:', version);
            const operations = document.querySelectorAll('.opblock');


            operations.forEach(function(operation) {
              const pathElement = operation.querySelector('.opblock-summary-path');
              if (pathElement) {
                const path = pathElement.textContent || pathElement.innerText;

                // Show/hide based on path version
                if (version === 'v1' && path.includes('/v1/')) {
                  operation.style.display = 'block';
                } else if (version === 'v2' && path.includes('/v2/')) {
                  operation.style.display = 'block';
                } else if (version === 'all') {
                  operation.style.display = 'block';
                } else {
                  operation.style.display = 'none';
                }
              }
            });

            console.log('‚úÖ Filtered endpoints for version:', version);
          }

          // Wait for Swagger to load and attach listener to server dropdown
          function attachServerDropdownListener() {
            const serverSelect = document.querySelector('.servers select');

            if (version === 'all') {
              counter.innerHTML = 'üìä Showing all ' + visibleCount + ' endpoints from both API versions';
            } else {
              counter.innerHTML = 'üìä Showing ' + visibleCount + ' endpoints for API v' + version +
                (version === '2' ? ' (Latest)' : ' (Legacy)');
            }
          }

          // Function to setup server dropdown listener
          function setupServerDropdown() {
            console.log('üîç [DEBUG] Attempting to setup server dropdown, retry:', retryCount);

            // Try multiple selectors for the server dropdown
            const serverSelectors = [
              '.servers select',
              '.servers-wrapper select',
              '.servers .servers-title + div select',
              'select[name="servers"]',
              '.scheme-container select'
            ];

            let selectElement = null;
            for (const selector of serverSelectors) {
              selectElement = document.querySelector(selector);
              if (selectElement) {
                console.log('‚úÖ Found select element with selector:', selector);
                break;
              }
            }

            if (selectElement) {
              // Remove any existing listeners by cloning the element
              const newSelect = selectElement.cloneNode(true);
              selectElement.parentNode.replaceChild(newSelect, selectElement);

              // Add our change listener
              newSelect.addEventListener('change', function(event) {
                const selectedUrl = event.target.value;
                console.log('ÔøΩ Server changed to:', selectedUrl);

                if (selectedUrl.includes('/v1')) {
                  console.log('üìç Filtering for v1 endpoints');
                  filterEndpointsByVersion('1');
                  updateButtonStates('1');
                } else if (selectedUrl.includes('/v2')) {
                  console.log('üìç Filtering for v2 endpoints');
                  filterEndpointsByVersion('2');
                  updateButtonStates('2');
                } else {
                  console.log('üìç Unknown version, showing all endpoints');
                  filterEndpointsByVersion('all');
                  updateButtonStates('all');
                }
              });

              console.log('‚úÖ Server dropdown listener attached successfully');

              // Set initial filter based on current selection (default to v2)
              const initialUrl = newSelect.value || newSelect.options[newSelect.selectedIndex]?.value;
              if (initialUrl && initialUrl.includes('/v2')) {
                setTimeout(() => {
                  filterEndpointsByVersion('2');
                  updateButtonStates('2');
                }, 100);
              } else if (initialUrl && initialUrl.includes('/v1')) {
                setTimeout(() => {
                  filterEndpointsByVersion('1');
                  updateButtonStates('1');
                }, 100);
              } else {
                // Default to v2 if no specific version detected
                setTimeout(() => {
                  filterEndpointsByVersion('2');
                  updateButtonStates('2');
                }, 100);
              }

              return true;
            } else {
              console.log('‚ùå Server dropdown not found, retry:', retryCount);
              return false;
            }
          }

          function updateButtonStates(version) {
            const buttons = document.querySelectorAll('.filter-btn');
            buttons.forEach(btn => {
              const btnVersion = btn.dataset.version;
              if (btnVersion === 'v' + version || (version === 'all' && btnVersion === 'all')) {
                // Active state
                if (btnVersion === 'v2') {
                  btn.style.background = '#3b82f6';
                  btn.style.color = 'white';
                } else if (btnVersion === 'v1') {
                  btn.style.background = '#f59e0b';
                  btn.style.color = 'white';
                } else {
                  btn.style.background = '#6b7280';
                  btn.style.color = 'white';
                }
              } else {
                // Inactive state
                btn.style.background = 'white';
                if (btnVersion === 'v2') {
                  btn.style.color = '#3b82f6';
                } else if (btnVersion === 'v1') {
                  btn.style.color = '#f59e0b';
                } else {
                  btn.style.color = '#6b7280';
                }
              }
            });
          }

          function setupVersionControls() {
            const serversSection = document.querySelector('.servers');
            if (serversSection && !serversSection.querySelector('.version-controls')) {
              const controlsDiv = document.createElement('div');
              controlsDiv.className = 'version-controls';
              controlsDiv.innerHTML = \`
                <div class="servers-description" style="margin-bottom: 15px; color: #6b7280; font-style: italic;">
                  üí° Server dropdown above changes base URL and auto-filters. Manual filter buttons:
                </div>
                <div style="display: flex; gap: 8px; margin-bottom: 15px; flex-wrap: wrap;">
                  <button onclick="filterEndpointsByVersion('2'); updateButtonStates('2');" class="filter-btn" data-version="v2" style="
                    padding: 10px 16px;
                    border: 2px solid #3b82f6;
                    border-radius: 6px;
                    background: #3b82f6;
                    color: white;
                    cursor: pointer;
                    font-weight: 600;
                    font-size: 13px;
                    transition: all 0.2s;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                  ">
                    üìò v2 Latest Only
                  </button>
                  <button onclick="filterEndpointsByVersion('1'); updateButtonStates('1');" class="filter-btn" data-version="v1" style="
                    padding: 10px 16px;
                    border: 2px solid #f59e0b;
                    border-radius: 6px;
                    background: white;
                    color: #f59e0b;
                    cursor: pointer;
                    font-weight: 600;
                    font-size: 13px;
                    transition: all 0.2s;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                  ">
                    üìô v1 Legacy Only
                  </button>
                  <button onclick="filterEndpointsByVersion('all'); updateButtonStates('all');" class="filter-btn" data-version="all" style="
                    padding: 10px 16px;
                    border: 2px solid #6b7280;
                    border-radius: 6px;
                    background: white;
                    color: #6b7280;
                    cursor: pointer;
                    font-weight: 600;
                    font-size: 13px;
                    transition: all 0.2s;
                    text-transform: uppercase;
                    letter-spacing: 0.5px;
                  ">
                    üìö Show All
                  </button>
                </div>
              \`;
              serversSection.appendChild(controlsDiv);

              // Add hover effects
              const style = document.createElement('style');
              style.textContent = \`
                .filter-btn:hover {
                  transform: translateY(-2px);
                  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                }
                .filter-btn:active {
                  transform: translateY(0);
                }
              \`;
              document.head.appendChild(style);
            }
          }

          function setupVersionBadges() {
            const operations = document.querySelectorAll('.opblock-summary-path');
            operations.forEach(function(op) {
              if (!op.querySelector('.version-badge')) {
                const path = op.textContent;
                const badge = document.createElement('span');
                badge.className = 'version-badge';
                badge.style.cssText = 'margin-left: 8px; padding: 2px 6px; border-radius: 3px; font-size: 11px; font-weight: bold; text-transform: uppercase;';

                if (path.includes('/v2/')) {
                  badge.textContent = 'v2';
                  badge.style.background = '#e0f2fe';
                  badge.style.color = '#0369a1';
                } else if (path.includes('/v1/')) {
                  badge.textContent = 'v1';
                  badge.style.background = '#fef3c7';
                  badge.style.color = '#d97706';
                }

                if (badge.textContent) {
                  op.appendChild(badge);
                }
              }
            });
          }

          // Function to check if Swagger UI is ready
          function checkSwaggerReady() {
            const operations = document.querySelectorAll('.opblock');
            const hasOperations = operations.length > 0;
            const hasServerDropdown = document.querySelector('.servers select') ||
                                    document.querySelector('.servers-wrapper select');

            console.log('üîç [DEBUG] Swagger ready check - Operations:', operations.length, 'Has dropdown:', !!hasServerDropdown);

            return hasOperations && hasServerDropdown;
          }

          // Main initialization function
          function initializeSwagger() {
            if (checkSwaggerReady()) {
              console.log('‚úÖ Swagger UI is ready, setting up enhancements');

              // Setup version badges
              setupVersionBadges();

              // Setup version controls
              setupVersionControls();

              // Setup server dropdown
              if (setupServerDropdown()) {
                swaggerUILoaded = true;
                console.log('üéâ Swagger enhancement completed successfully');
                return;
              }
            }

            retryCount++;
            if (retryCount < maxRetries) {
              console.log('‚è≥ Swagger not ready, retrying in 500ms...');
              setTimeout(initializeSwagger, 500);
            } else {
              console.log('‚ùå Max retries reached, Swagger enhancement failed');
            }
          }

          // Start when DOM is ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeSwagger);
          } else {
            initializeSwagger();
          }

          // Make functions globally available
          window.filterEndpointsByVersion = filterEndpointsByVersion;
          window.updateButtonStates = updateButtonStates;
        `,
        customfavIcon: '/favicon.ico',
      });

      console.log(`üìñ Swagger UI available at: ${envConfig.baseUrl}/api/docs`);
      console.log(`üîÑ Use the server dropdown to switch between API versions`);
      console.log(`ÔøΩ API v2 (Latest): Select "${envConfig.baseUrl}/api/v2" in server dropdown`);
      console.log(`ÔøΩ API v1 (Legacy): Select "${envConfig.baseUrl}/api/v1" in server dropdown`);
    } catch (error) {
      console.warn('‚ö†Ô∏è  OpenAPI setup failed:', error);
    }
  }

  await app.listen(envConfig.port);
  console.log(`üöÄ Application is running on: ${envConfig.baseUrl}`);
}

void bootstrap();
